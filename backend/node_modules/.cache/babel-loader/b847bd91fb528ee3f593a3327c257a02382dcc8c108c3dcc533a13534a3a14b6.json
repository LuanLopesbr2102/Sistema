{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3001';\nclass AlunoProfessorService {\n  async getAllAlunoProfessor() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Aluno&Professor/`);\n      if (!response.ok) {\n        throw new Error('Erro ao buscar Aluno e Professores');\n      }\n      const dados = await response.json();\n      return dados;\n    } catch (error) {\n      console.error('Erro ao buscar Aluno e Professores:', error);\n    }\n  }\n  async filtrar(filtroData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Aluno&Professor/filtrar`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(filtroData)\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao filtrar Aluno ou Professor');\n      }\n      return response.json();\n    } catch (error) {\n      throw error;\n    }\n  }\n  async createAlunoProfessor(alunoprofessorData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Aluno&Professor/`, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(alunoprofessorData)\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao cadastrar Aluno ou Professor');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  async updateAlunoProfessor(cpf, alunoprofessorData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Aluno&Professor/${cpf}`, {\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(alunoprofessorData)\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao atualizar Aluno ou Professor');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  async deleteAlunoProfessor(cpf) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/Aluno&Professor/${cpf}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error('Erro ao deletar aluno e professor');\n      }\n    } catch (error) {\n      console.error('Erro ao deletar aluno ou professor', error);\n      throw error;\n    }\n  }\n}\nexport default AlunoProfessorService;","map":{"version":3,"names":["API_BASE_URL","AlunoProfessorService","getAllAlunoProfessor","response","fetch","ok","Error","dados","json","error","console","filtrar","filtroData","method","headers","body","JSON","stringify","createAlunoProfessor","alunoprofessorData","updateAlunoProfessor","cpf","deleteAlunoProfessor"],"sources":["C:/Users/Luan/Desktop/Trabalho Full/frontend/src/Componentes/services/alunoprofessorService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3001';\r\n\r\nclass AlunoProfessorService{\r\n\r\n    async getAllAlunoProfessor(){\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Aluno&Professor/`)\r\n\r\n            if(!response.ok){\r\n                throw new Error('Erro ao buscar Aluno e Professores')\r\n            }\r\n             const dados = await response.json();\r\n             return dados;\r\n\r\n\r\n        } catch (error) {\r\n            console.error('Erro ao buscar Aluno e Professores:', error);\r\n\r\n        }\r\n    }\r\n\r\n    \r\n    async filtrar(filtroData){\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Aluno&Professor/filtrar`,{\r\n                method:\"POST\",\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                },\r\n\r\n                body:JSON.stringify(filtroData)\r\n            });\r\n            if(!response.ok){\r\n                throw new Error('Erro ao filtrar Aluno ou Professor')\r\n            }\r\n            return response.json()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async createAlunoProfessor(alunoprofessorData){\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Aluno&Professor/`,{\r\n                method:\"POST\",\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                },\r\n\r\n                body:JSON.stringify(alunoprofessorData)\r\n            })\r\n            if(!response.ok){\r\n                throw new Error('Erro ao cadastrar Aluno ou Professor')\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateAlunoProfessor(cpf,alunoprofessorData){\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Aluno&Professor/${cpf}`,{\r\n                method:\"PUT\",\r\n                headers:{\r\n                    'Content-Type': 'application/json',\r\n                },\r\n\r\n                body:JSON.stringify(alunoprofessorData)\r\n            })\r\n            if(!response.ok){\r\n                throw new Error('Erro ao atualizar Aluno ou Professor')\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    async deleteAlunoProfessor(cpf){\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/Aluno&Professor/${cpf}`,{\r\n                method:\"DELETE\",\r\n                \r\n            })\r\n\r\n            if(!response.ok){\r\n                throw new Error('Erro ao deletar aluno e professor')\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao deletar aluno ou professor', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexport default AlunoProfessorService;"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,qBAAqB;EAEvB,MAAMC,oBAAoBA,CAAA,EAAE;IACxB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,mBAAkB,CAAC;MAEhE,IAAG,CAACG,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACzD;MACC,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACnC,OAAOD,KAAK;IAGjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAE/D;EACJ;EAGA,MAAME,OAAOA,CAACC,UAAU,EAAC;IACrB,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,0BAAyB,EAAC;QACnEa,MAAM,EAAC,MAAM;QACbC,OAAO,EAAC;UACJ,cAAc,EAAE;QACpB,CAAC;QAEDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACL,UAAU;MAClC,CAAC,CAAC;MACF,IAAG,CAACT,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACzD;MACA,OAAOH,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;EAGA,MAAMS,oBAAoBA,CAACC,kBAAkB,EAAC;IAC1C,IAAI;MACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,mBAAkB,EAAC;QAC5Da,MAAM,EAAC,MAAM;QACbC,OAAO,EAAC;UACJ,cAAc,EAAE;QACpB,CAAC;QAEDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACE,kBAAkB;MAC1C,CAAC,CAAC;MACF,IAAG,CAAChB,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMW,oBAAoBA,CAACC,GAAG,EAACF,kBAAkB,EAAC;IAC9C,IAAI;MACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,oBAAmBqB,GAAI,EAAC,EAAC;QAClER,MAAM,EAAC,KAAK;QACZC,OAAO,EAAC;UACJ,cAAc,EAAE;QACpB,CAAC;QAEDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACE,kBAAkB;MAC1C,CAAC,CAAC;MACF,IAAG,CAAChB,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ;EAIA,MAAMa,oBAAoBA,CAACD,GAAG,EAAC;IAC3B,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,oBAAmBqB,GAAI,EAAC,EAAC;QAClER,MAAM,EAAC;MAEX,CAAC,CAAC;MAEF,IAAG,CAACV,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACxD;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACf;EACJ;AACJ;AACA,eAAeR,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}